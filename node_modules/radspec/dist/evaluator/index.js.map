{"version":3,"sources":["../../src/evaluator/index.js"],"names":["TypedValue","constructor","type","value","types","isInteger","BN","isBN","Web3Utils","isAddress","Error","toChecksumAddress","toString","Evaluator","ast","bindings","availableHelpers","eth","ethNode","from","to","data","Eth","DEFAULT_ETH_NODE","helpers","HelperManager","evaluateNodes","nodes","Promise","all","map","evaluateNode","bind","node","Math","ceil","body","join","length","panic","left","right","operator","add","sub","mul","pow","div","mod","leftValue","rightValue","bothTypesAddress","bothTypesBytes","bytes","isType","toBN","gt","gte","lt","lte","eq","predicate","leftFalsey","isZero","startsWith","test","target","checkAddressChecksum","inputs","outputs","selectedReturnValueIndex","findIndex","output","selected","callee","returnType","call","ABI","encodeFunctionCall","name","input","then","decodeParameters","item","returnData","helperName","exists","result","execute","evaluator","property","hasOwnProperty","binding","evaluate","evaluatedNodes","msg","options"],"mappings":"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","sourcesContent":["/**\n * @module radspec/evaluator\n */\n\nimport ABI from 'web3-eth-abi'\nimport Eth from 'web3-eth'\nimport Web3Utils from 'web3-utils'\nimport BN from 'bn.js'\nimport types from '../types'\nimport HelperManager from '../helpers/HelperManager'\nimport { DEFAULT_ETH_NODE } from '../defaults'\n\n/**\n * A value coupled with a type\n *\n * @class TypedValue\n * @param {string} type The type of the value\n * @param {*} value The value\n * @property {string} type\n * @property {*} value\n */\nclass TypedValue {\n  constructor (type, value) {\n    this.type = type\n    this.value = value\n\n    if (types.isInteger(this.type) && !BN.isBN(this.value)) {\n      this.value = new BN(this.value)\n    }\n\n    if (this.type === 'address') {\n      if (!Web3Utils.isAddress(this.value)) {\n        throw new Error(`Invalid address \"${this.value}\"`)\n      }\n      this.value = Web3Utils.toChecksumAddress(this.value)\n    }\n  }\n\n  /**\n   * Get the string representation of the wrapped value\n   *\n   * @return {string}\n   */\n  toString () {\n    return this.value.toString()\n  }\n}\n\n/**\n * Walks an AST and evaluates each node.\n *\n * @class Evaluator\n * @param {radspec/parser/AST} ast The AST to evaluate\n * @param {radspec/Bindings} bindings An object of bindings and their values\n * @param {?Object} options An options object\n * @param {?Object} options.availablehelpers Available helpers\n * @param {?Web3} options.eth Web3 instance (used over options.ethNode)\n * @param {?string} options.ethNode The URL to an Ethereum node\n * @param {?string} options.to The destination address for this expression's transaction\n * @property {radspec/parser/AST} ast\n * @property {radspec/Bindings} bindings\n */\nexport class Evaluator {\n  constructor (ast, bindings, { availableHelpers = {}, eth, ethNode, from, to, value = '0', data } = {}) {\n    this.ast = ast\n    this.bindings = bindings\n    this.eth = eth || new Eth(ethNode || DEFAULT_ETH_NODE)\n    this.from = from && new TypedValue('address', from)\n    this.to = to && new TypedValue('address', to)\n    this.value = new TypedValue('uint', new BN(value))\n    this.data = data && new TypedValue('bytes', data)\n    this.helpers = new HelperManager(availableHelpers)\n  }\n\n  /**\n   * Evaluate an array of AST nodes.\n   *\n   * @param  {Array<radspec/parser/Node>} nodes\n   * @return {Promise<Array<string>>}\n   */\n  async evaluateNodes (nodes) {\n    return Promise.all(\n      nodes.map(this.evaluateNode.bind(this))\n    )\n  }\n\n  /**\n   * Evaluate a single node.\n   *\n   * @param  {radspec/parser/Node} node\n   * @return {Promise<string>}\n   */\n  async evaluateNode (node) {\n    if (node.type === 'ExpressionStatement') {\n      return (await this.evaluateNodes(node.body)).join(' ')\n    }\n\n    if (node.type === 'GroupedExpression') {\n      return this.evaluateNode(node.body)\n    }\n\n    if (node.type === 'MonologueStatement') {\n      return new TypedValue('string', node.value)\n    }\n\n    if (node.type === 'StringLiteral') {\n      return new TypedValue('string', node.value || '')\n    }\n\n    if (node.type === 'NumberLiteral') {\n      return new TypedValue('int256', node.value)\n    }\n\n    if (node.type === 'BytesLiteral') {\n      const length = Math.ceil((node.value.length - 2) / 2)\n      if (length > 32) {\n        this.panic('Byte literal represents more than 32 bytes')\n      }\n\n      return new TypedValue(`bytes${length}`, node.value)\n    }\n\n    if (node.type === 'BoolLiteral') {\n      return new TypedValue('bool', node.value === 'true')\n    }\n\n    if (node.type === 'BinaryExpression') {\n      const left = await this.evaluateNode(node.left)\n      const right = await this.evaluateNode(node.right)\n\n      // String concatenation\n      if ((left.type === 'string' ||\n        right.type === 'string') &&\n        node.operator === 'PLUS') {\n        return new TypedValue('string', left.value.toString() + right.value.toString())\n      }\n\n      // TODO Additionally check that the type is signed if subtracting\n      if (!types.isInteger(left.type) ||\n        !types.isInteger(right.type)) {\n        this.panic(`Cannot evaluate binary expression \"${node.operator}\" for non-integer types \"${left.type}\" and \"${right.type}\"`)\n      }\n\n      switch (node.operator) {\n        case 'PLUS':\n          return new TypedValue('int256', left.value.add(right.value))\n        case 'MINUS':\n          return new TypedValue('int256', left.value.sub(right.value))\n        case 'STAR':\n          return new TypedValue('int256', left.value.mul(right.value))\n        case 'POWER':\n          return new TypedValue('int256', left.value.pow(right.value))\n        case 'SLASH':\n          return new TypedValue('int256', left.value.div(right.value))\n        case 'MODULO':\n          return new TypedValue('int256', left.value.mod(right.value))\n        default:\n          this.panic(`Undefined binary operator \"${node.operator}\"`)\n      }\n    }\n\n    if (node.type === 'ComparisonExpression') {\n      const left = await this.evaluateNode(node.left)\n      const right = await this.evaluateNode(node.right)\n\n      let leftValue = left.value\n      let rightValue = right.value\n\n      const bothTypesAddress = (left, right) => (\n        // isAddress is true if type is address or bytes with size less than 20\n        types.isAddress(left.type) &&\n        types.isAddress(right.type)\n      )\n\n      const bothTypesBytes = (left, right) => (\n        types.types.bytes.isType(left.type) &&\n        types.types.bytes.isType(right.type)\n      )\n\n      // Conversion to BN for comparison will happen if:\n      // - Both types are addresses or bytes of any size (can be different sizes)\n      // - If one of the types is an address and the other bytes with size less than 20\n      if (bothTypesAddress(left, right) || bothTypesBytes(left, right)) {\n        leftValue = Web3Utils.toBN(leftValue)\n        rightValue = Web3Utils.toBN(rightValue)\n      } else if (!types.isInteger(left.type) ||\n        !types.isInteger(right.type)) {\n        this.panic(`Cannot evaluate binary expression \"${node.operator}\" for non-integer or fixed-size bytes types \"${left.type}\" and \"${right.type}\"`)\n      }\n\n      switch (node.operator) {\n        case 'GREATER':\n          return new TypedValue('bool', leftValue.gt(rightValue))\n        case 'GREATER_EQUAL':\n          return new TypedValue('bool', leftValue.gte(rightValue))\n        case 'LESS':\n          return new TypedValue('bool', leftValue.lt(rightValue))\n        case 'LESS_EQUAL':\n          return new TypedValue('bool', leftValue.lte(rightValue))\n        case 'EQUAL_EQUAL':\n          return new TypedValue('bool', leftValue.eq(rightValue))\n        case 'BANG_EQUAL':\n          return new TypedValue('bool', !leftValue.eq(rightValue))\n      }\n    }\n\n    if (node.type === 'TernaryExpression') {\n      if ((await this.evaluateNode(node.predicate)).value) {\n        return this.evaluateNode(node.left)\n      }\n\n      return this.evaluateNode(node.right)\n    }\n\n    if (node.type === 'DefaultExpression') {\n      const left = await this.evaluateNode(node.left)\n      let leftFalsey\n\n      if (types.isInteger(left.type)) {\n        leftFalsey = left.value.isZero()\n      } else if (left.type === 'address' || left.type.startsWith('bytes')) {\n        leftFalsey = /^0x[0]*$/.test(left.value)\n      } else {\n        leftFalsey = !left.value\n      }\n\n      return leftFalsey ? this.evaluateNode(node.right) : left\n    }\n\n    if (node.type === 'CallExpression') {\n      let target\n\n      // Inject self\n      if (node.target.type === 'Identifier' && node.target.value === 'self') {\n        target = this.to\n      } else {\n        target = await this.evaluateNode(node.target)\n      }\n\n      if (target.type !== 'bytes20' &&\n        target.type !== 'address') {\n        this.panic('Target of call expression was not an address')\n      } else if (!Web3Utils.checkAddressChecksum(target.value)) {\n        this.panic(`Checksum failed for address \"${target.value}\"`)\n      }\n\n      const inputs = await this.evaluateNodes(node.inputs)\n      const outputs = node.outputs\n      const selectedReturnValueIndex = outputs.findIndex((output) => output.selected)\n      if (selectedReturnValueIndex === -1) {\n        this.panic(`No selected return value for function call \"${node.callee}\"`)\n      }\n      const returnType = outputs[selectedReturnValueIndex].type\n\n      const call = ABI.encodeFunctionCall({\n        name: node.callee,\n        type: 'function',\n\n        inputs: inputs.map(({ type }) => ({\n          type,\n          // web3.js 1.x requires the inputs to have names, otherwise it assumes the type is a tuple\n          // We can remove this if web3.js 1.x fixes this, or we upgrade to a newer major version\n          // For reference: this is the problematic bit in web3.js:\n          // https://github.com/ethereum/web3.js/blob/7d1b0eab31ff6b52c170dedc172decebea0a0217/packages/web3-eth-abi/src/index.js#L110\n          name: 'nonEmptyName'\n        }))\n      }, inputs.map((input) => input.value.toString()))\n\n      return this.eth.call({\n        to: target.value,\n        data: call\n      }).then(\n        (data) => ABI.decodeParameters(outputs.map((item) => item.type), data)\n      ).then(\n        (returnData) => new TypedValue(returnType, returnData[selectedReturnValueIndex])\n      )\n    }\n\n    if (node.type === 'HelperFunction') {\n      const helperName = node.name\n\n      if (!this.helpers.exists(helperName)) {\n        this.panic(`${helperName} helper function is not defined`)\n      }\n\n      const inputs = await this.evaluateNodes(node.inputs)\n      const result = await this.helpers.execute(\n        helperName,\n        inputs,\n        {\n          eth: this.eth,\n          evaluator: this\n        }\n      )\n\n      return new TypedValue(result.type, result.value)\n    }\n\n    if (node.type === 'PropertyAccessExpression' && node.target.value === 'msg') {\n      if (node.property === 'value') {\n        return this.value\n      }\n\n      if (node.property === 'sender') {\n        return this.from\n      }\n\n      if (node.property === 'data') {\n        return this.data\n      }\n\n      this.panic(`Expecting value, sender or data property for msg identifier but got: ${node.property}`)\n    }\n\n    if (node.type === 'Identifier') {\n      if (node.value === 'self') {\n        return this.to\n      }\n\n      if (!this.bindings.hasOwnProperty(node.value)) {\n        this.panic(`Undefined binding \"${node.value}\"`)\n      }\n\n      const binding = this.bindings[node.value]\n      return new TypedValue(binding.type, binding.value)\n    }\n  }\n\n  /**\n   * Evaluate the entire AST.\n   *\n   * @return {string}\n   */\n  async evaluate () {\n    return this.evaluateNodes(\n      this.ast.body\n    ).then(\n      (evaluatedNodes) => evaluatedNodes.join('')\n    )\n  }\n\n  /**\n   * Report an error and abort evaluation.\n   *\n   * @param  {string} msg\n   */\n  panic (msg) {\n    throw new Error(`Error: ${msg}`)\n  }\n}\n\n/**\n * Evaluates an AST\n *\n * @memberof radspec/evaluator\n * @param {radspec/parser/AST} ast The AST to evaluate\n * @param {radspec/Bindings} bindings An object of bindings and their values\n * @param {?Object} options An options object\n * @param {?string} options.ethNode The URL to an Ethereum node\n * @param {?string} options.to The destination address for this expression's transaction\n * @return {string}\n */\nexport function evaluate (ast, bindings, options) {\n  return new Evaluator(ast, bindings, options).evaluate()\n}\n"],"file":"index.js"}