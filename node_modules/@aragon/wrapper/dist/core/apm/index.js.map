{"version":3,"sources":["../../../src/core/apm/index.js"],"names":["DEFAULT_FETCH_TIMEOUT","getApmInternalAppInfo","appId","fetchRepoContentFromVersion","fetcher","versionData","fetchTimeout","contentURI","contractAddress","version","appContent","err","console","warn","web3","ipfsGateway","FileFetcher","getContentPath","location","provider","path","getFullPath","fetchLatestRepoContent","repoAddress","options","repo","fetchLatestRepoContentForContract","codeAddress"],"mappings":"utCASA,KAAMA,CAAAA,qBAAqB,CAAG,GAA9B,CAAoC;AAE7B,QAASC,CAAAA,qBAAT,CAAgCC,KAAhC,CAAuC,CAC5C,MAAO,2BAAWA,KAAX,CAAkB,KAAlB,CACR,CAED,cAAeC,CAAAA,2BAAf,CAA4CC,OAA5C,CAAqDC,WAArD,CAAkE,CAAEC,YAAF,CAAlE,CAAoF,CAClF,KAAM,CAAEC,UAAF,CAAcC,eAAd,CAA+BC,OAA/B,EAA2CJ,WAAjD,CAEA,GAAIK,CAAAA,UAAJ,CACA,GAAI,CACFA,UAAU,CAAG,KAAM,8BAAoBN,OAApB,CAA6BG,UAA7B,CAAyC,CAAED,YAAF,CAAzC,CACpB,CAAC,MAAOK,GAAP,CAAY,CACZC,OAAO,CAACC,IAAR,CAAa,8BAAb,CAA6CF,GAA7C,CACD,CAED,wBACKD,UADL,EAEEF,eAFF,CAGEC,OAHF,EAKD,CAEc,kBAAUK,IAAV,CAAgB,CAAEC,WAAF,CAAeT,YAAY,CAAGN,qBAA9B,EAAwD,EAAxE,CAA4E,CACzF,KAAMI,CAAAA,OAAO,CAAG,GAAIY,qBAAJ,CAAgB,CAAED,WAAF,CAAhB,CAAhB,CAEA,MAAO,CACLE,cAAc,CAAE,CAAC,CAAEC,QAAF,CAAYC,QAAZ,CAAD,CAAyBC,IAAzB,GACdhB,OAAO,CAACiB,WAAR,CAAoBF,QAApB,CAA8BD,QAA9B,CAAwCE,IAAxC,CAFG,CAGLE,sBAAsB,CAAE,MAAOC,WAAP,CAAoBC,OAApB,GAAgC,CACtD,KAAMC,CAAAA,IAAI,CAAG,wBAAcF,WAAd,CAA2BT,IAA3B,CAAb,CACA,MAAOX,CAAAA,2BAA2B,CAChCC,OADgC,EAEhC,KAAM,+BAAqBqB,IAArB,CAF0B,iBAG9BnB,YAH8B,EAGbkB,OAHa,EAKnC,CAVI,CAWLE,iCAAiC,CAAE,MAAOH,WAAP,CAAoBI,WAApB,CAAiCH,OAAjC,GAA6C,CAC9E,KAAMC,CAAAA,IAAI,CAAG,wBAAcF,WAAd,CAA2BT,IAA3B,CAAb,CACA,MAAOX,CAAAA,2BAA2B,CAChCC,OADgC,EAEhC,KAAM,0CAAgCqB,IAAhC,CAAsCE,WAAtC,CAF0B,iBAG9BrB,YAH8B,EAGbkB,OAHa,EAKnC,CAlBI,CAoBR","sourcesContent":["import {\n  getRepoLatestVersion,\n  getRepoLatestVersionForContract,\n  fetchRepoContentURI,\n  makeRepoProxy\n} from './repo'\nimport { getAppInfo } from '../../interfaces'\nimport FileFetcher from '../../utils/FileFetcher'\n\nconst DEFAULT_FETCH_TIMEOUT = 10000 // 10s\n\nexport function getApmInternalAppInfo (appId) {\n  return getAppInfo(appId, 'apm')\n}\n\nasync function fetchRepoContentFromVersion (fetcher, versionData, { fetchTimeout }) {\n  const { contentURI, contractAddress, version } = versionData\n\n  let appContent\n  try {\n    appContent = await fetchRepoContentURI(fetcher, contentURI, { fetchTimeout })\n  } catch (err) {\n    console.warn('Fetching repo content failed', err)\n  }\n\n  return {\n    ...appContent,\n    contractAddress,\n    version\n  }\n}\n\nexport default function (web3, { ipfsGateway, fetchTimeout = DEFAULT_FETCH_TIMEOUT } = {}) {\n  const fetcher = new FileFetcher({ ipfsGateway })\n\n  return {\n    getContentPath: ({ location, provider }, path) =>\n      fetcher.getFullPath(provider, location, path),\n    fetchLatestRepoContent: async (repoAddress, options) => {\n      const repo = makeRepoProxy(repoAddress, web3)\n      return fetchRepoContentFromVersion(\n        fetcher,\n        await getRepoLatestVersion(repo),\n        { fetchTimeout, ...options }\n      )\n    },\n    fetchLatestRepoContentForContract: async (repoAddress, codeAddress, options) => {\n      const repo = makeRepoProxy(repoAddress, web3)\n      return fetchRepoContentFromVersion(\n        fetcher,\n        await getRepoLatestVersionForContract(repo, codeAddress),\n        { fetchTimeout, ...options }\n      )\n    }\n  }\n}\n"],"file":"index.js"}